package perpustakaan.language.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_book_status_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_book_status_NonTypesystemRule() {
  }
  public void applyRule(final SNode item, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SPropertyOperations.getString(item, PROPS.key$EFxw) == "status" && SPropertyOperations.getString(SLinkOperations.getTarget(item, LINKS.value$F0aS), PROPS.text$gdDF) == "tidak tersedia") {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(item, LINKS.value$F0aS), "Buku tidak bisa dipinjam karena tidak tersedia", "r:91ccb5e2-c7b3-4094-bfb0-e8378f032fa4(perpustakaan.language.typesystem)", "6062119405061088172", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Item$Ez;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty key$EFxw = MetaAdapterFactory.getProperty(0x1f2e2539878a4e98L, 0xac085c5c9c490ce7L, 0x6410ed4088fa33a4L, 0x6410ed4088fa33e8L, "key");
    /*package*/ static final SProperty text$gdDF = MetaAdapterFactory.getProperty(0x1f2e2539878a4e98L, 0xac085c5c9c490ce7L, 0x6410ed4088fa3444L, 0x5420f97afca6b858L, "text");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink value$F0aS = MetaAdapterFactory.getContainmentLink(0x1f2e2539878a4e98L, 0xac085c5c9c490ce7L, 0x6410ed4088fa33a4L, 0x6410ed4088fa3401L, "value");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Item$Ez = MetaAdapterFactory.getConcept(0x1f2e2539878a4e98L, 0xac085c5c9c490ce7L, 0x6410ed4088fa33a4L, "perpustakaan.language.structure.Item");
  }
}
