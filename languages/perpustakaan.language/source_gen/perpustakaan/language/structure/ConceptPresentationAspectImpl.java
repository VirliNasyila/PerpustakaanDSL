package perpustakaan.language.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Anggota;
  private ConceptPresentation props_Buku;
  private ConceptPresentation props_Item;
  private ConceptPresentation props_Peminjaman;
  private ConceptPresentation props_Pengembalian;
  private ConceptPresentation props_Petugas;
  private ConceptPresentation props_Program;
  private ConceptPresentation props_Value;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Anggota:
        if (props_Anggota == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("anggota");
          props_Anggota = cpb.create();
        }
        return props_Anggota;
      case LanguageConceptSwitch.Buku:
        if (props_Buku == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("buku");
          props_Buku = cpb.create();
        }
        return props_Buku;
      case LanguageConceptSwitch.Item:
        if (props_Item == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("item");
          props_Item = cpb.create();
        }
        return props_Item;
      case LanguageConceptSwitch.Peminjaman:
        if (props_Peminjaman == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Peminjaman");
          props_Peminjaman = cpb.create();
        }
        return props_Peminjaman;
      case LanguageConceptSwitch.Pengembalian:
        if (props_Pengembalian == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("pengembalian");
          props_Pengembalian = cpb.create();
        }
        return props_Pengembalian;
      case LanguageConceptSwitch.Petugas:
        if (props_Petugas == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("petugas");
          props_Petugas = cpb.create();
        }
        return props_Petugas;
      case LanguageConceptSwitch.Program:
        if (props_Program == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Program");
          props_Program = cpb.create();
        }
        return props_Program;
      case LanguageConceptSwitch.Value:
        if (props_Value == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Value");
          props_Value = cpb.create();
        }
        return props_Value;
    }
    return null;
  }
}
